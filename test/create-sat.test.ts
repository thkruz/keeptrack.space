// Generated by Qodo Gen

import { SatMath } from '@app/app/analysis/sat-math';
import { GetSatType, ToastMsgType } from '@app/engine/core/interfaces';
import { CreateSat } from '@app/plugins/create-sat/create-sat';
import { CruncerMessageTypes } from '@app/webworker/positionCruncher';
import { FormatTle, Sgp4 } from '@ootk/src/main';

describe('CreateSat', () => {

  // Creating a satellite with valid parameters should add it to the catalog
  it('should add a satellite to the catalog when valid parameters are provided', () => {
    // Mock dependencies
    const mockCatalogManager = {
      sccNum2Id: jest.fn().mockReturnValue(12345),
      getObject: jest.fn().mockReturnValue({
        isSatellite: () => true,
      }),
      objectCache: [],
      satCruncher: {
        postMessage: jest.fn(),
      },
    };

    const mockOrbitManager = {
      changeOrbitBufferData: jest.fn(),
    };

    const mockUiManager = {
      doSearch: jest.fn(),
      toast: jest.fn(),
    };

    const mockTimeManager = {
      simulationTimeObj: new Date(),
    };

    // Mock Sgp4 and FormatTle
    const mockSatrec = {};

    Sgp4.createSatrec = jest.fn().mockReturnValue(mockSatrec);
    Sgp4.propagate = jest.fn().mockReturnValue({
      position: { x: 1, y: 2, z: 3 },
      velocity: { x: 0.1, y: 0.2, z: 0.3 },
    });

    FormatTle.createTle = jest.fn().mockReturnValue({
      tle1: '1 39280U 13055R   15046.42575068  .30789804  00000-0  57707-2 0  9996',
      tle2: '2 39280 080.8897 122.4763 0060411 007.5143 351.4794 16.26612222 73510',
    });

    SatMath.altitudeCheck = jest.fn().mockReturnValue(500);

    // Mock DOM elements
    document.getElementById = jest.fn().mockImplementation((id) => {
      const element = document.createElement('input');

      element.id = id;
      element.value = '12345';

      return element;
    });

    // Mock keepTrackApi
    ServiceLocator.getCatalogManager = jest.fn().mockReturnValue(mockCatalogManager);
    ServiceLocator.getOrbitManager = jest.fn().mockReturnValue(mockOrbitManager);
    ServiceLocator.getUiManager = jest.fn().mockReturnValue(mockUiManager);
    ServiceLocator.getTimeManager = jest.fn().mockReturnValue(mockTimeManager);

    // Mock the validation CreateSat[validateInputs_] method to always return false
    // eslint-disable-next-line dot-notation
    CreateSat['validateInputs_'] = jest.fn().mockReturnValue(false);

    // Call the method under test
    // eslint-disable-next-line dot-notation
    CreateSat['createSatSubmit_']();

    // Assertions
    expect(mockCatalogManager.sccNum2Id).toHaveBeenCalledWith(12345);
    expect(mockCatalogManager.getObject).toHaveBeenCalledWith(12345, GetSatType.EXTRA_ONLY);
    expect(FormatTle.createTle).toHaveBeenCalled();
    expect(Sgp4.createSatrec).toHaveBeenCalledWith(
      '1 39280U 13055R   15046.42575068  .30789804  00000-0  57707-2 0  9996',
      '2 39280 080.8897 122.4763 0060411 007.5143 351.4794 16.26612222 73510',
    );

    expect(SatMath.altitudeCheck).toHaveBeenCalledWith(mockSatrec, mockTimeManager.simulationTimeObj);
    expect(Sgp4.propagate).toHaveBeenCalledWith(mockSatrec, 0);
    expect(mockCatalogManager.satCruncher.postMessage).toHaveBeenCalledWith({
      typ: CruncerMessageTypes.SAT_EDIT,
      active: true,
      id: 12345,
      tle1: '1 39280U 13055R   15046.42575068  .30789804  00000-0  57707-2 0  9996',
      tle2: '2 39280 080.8897 122.4763 0060411 007.5143 351.4794 16.26612222 73510',
    });
    expect(mockOrbitManager.changeOrbitBufferData).toHaveBeenCalledWith(12345,
      '1 39280U 13055R   15046.42575068  .30789804  00000-0  57707-2 0  9996',
      '2 39280 080.8897 122.4763 0060411 007.5143 351.4794 16.26612222 73510',
    );
    expect(mockUiManager.doSearch).toHaveBeenCalledWith('12345');
    expect(mockCatalogManager.objectCache[12345]).toBeDefined();
  });

  // Creating a satellite with parameters that result in sub-orbital trajectory should show error toast
  it('should show error toast when satellite parameters result in sub-orbital trajectory', () => {
    // Mock dependencies
    const mockCatalogManager = {
      sccNum2Id: jest.fn().mockReturnValue(12345),
      getObject: jest.fn().mockReturnValue({
        isSatellite: () => true,
      }),
      objectCache: [],
      satCruncher: {
        postMessage: jest.fn(),
      },
    };

    const mockOrbitManager = {
      changeOrbitBufferData: jest.fn(),
    };

    const mockUiManager = {
      toast: jest.fn(),
      doSearch: jest.fn(),
    };

    const mockTimeManager = {
      simulationTimeObj: new Date(),
    };

    // Mock Sgp4 and FormatTle
    const mockSatrec = {};

    Sgp4.createSatrec = jest.fn().mockReturnValue(mockSatrec);

    FormatTle.createTle = jest.fn().mockReturnValue({
      tle1: '1 39280U 13055R   15046.42575068  .30789804  00000-0  57707-2 0  9996',
      tle2: '2 39280 080.8897 122.4763 0060411 007.5143 351.4794 16.26612222 73510',
    });

    // Mock altitude check to return a value less than 1 (sub-orbital)
    SatMath.altitudeCheck = jest.fn().mockReturnValue(0.5);

    // Mock DOM elements
    document.getElementById = jest.fn().mockImplementation((id) => {
      const element = document.createElement('input');

      element.id = id;
      element.value = '12345';
      element.style = '';

      return element;
    });

    // Mock keepTrackApi
    ServiceLocator.getCatalogManager = jest.fn().mockReturnValue(mockCatalogManager);
    ServiceLocator.getOrbitManager = jest.fn().mockReturnValue(mockOrbitManager);
    ServiceLocator.getUiManager = jest.fn().mockReturnValue(mockUiManager);
    ServiceLocator.getTimeManager = jest.fn().mockReturnValue(mockTimeManager);

    // Call the method under test
    // eslint-disable-next-line dot-notation
    CreateSat['createSatSubmit_']();

    // Assertions
    expect(mockCatalogManager.sccNum2Id).toHaveBeenCalledWith(12345);
    expect(mockCatalogManager.getObject).toHaveBeenCalledWith(12345, GetSatType.EXTRA_ONLY);
    expect(FormatTle.createTle).toHaveBeenCalled();
    expect(Sgp4.createSatrec).toHaveBeenCalledWith(
      '1 39280U 13055R   15046.42575068  .30789804  00000-0  57707-2 0  9996',
      '2 39280 080.8897 122.4763 0060411 007.5143 351.4794 16.26612222 73510',
    );
    expect(SatMath.altitudeCheck).toHaveBeenCalledWith(mockSatrec, mockTimeManager.simulationTimeObj);

    // Verify the toast was shown with the error message
    expect(mockUiManager.toast).toHaveBeenCalledWith(
      'Failed to propagate satellite. Try different parameters or report this issue if parameters are correct.',
      ToastMsgType.caution,
      true,
    );

    // Verify that the satellite was not added to the catalog
    expect(mockCatalogManager.satCruncher.postMessage).not.toHaveBeenCalled();
    expect(mockOrbitManager.changeOrbitBufferData).not.toHaveBeenCalled();
    expect(mockUiManager.doSearch).not.toHaveBeenCalled();
  });
});

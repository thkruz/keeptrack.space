import { getEl } from '@app/engine/utils/get-el';
// Generated by CodiumAI

import { MobileManager } from '@app/app/ui/mobileManager';
import { SplashScreen } from '@app/app/ui/splash-screen';

describe('SplashScreen_class', () => {
  beforeEach(() => {
    const shadowDiv = document.createElement('div');
    const shadow = shadowDiv.attachShadow({ mode: 'open' });
    const shadowBody = document.createElement('body');

    shadow.appendChild(shadowBody);
    SplashScreen.initLoadingScreen(shadowBody);
  });

  // Tests that the loading screen is hidden immediately when running on mobile
  it('test_hide_splash_screen_mobile', () => {
    MobileManager.checkMobileMode = jest.fn().mockReturnValue(true);
    SplashScreen.hideSplashScreen();
    // Wait for timers to finish
    jest.advanceTimersByTime(1000);
    expect(getEl('loading-screen')?.style.display).toBe('');
  });

  // Tests that the loading screen is resized and hidden after a timeout when running on desktop
  it('test_hide_splash_screen_desktop', () => {
    SplashScreen.hideSplashScreen();
    // Wait for timers to finish
    jest.advanceTimersByTime(1000);
    expect(getEl('loading-screen')?.style.display).toBe('');
  });

  // Tests that loadStr() does nothing when the loader text element is not found
  it('test_load_str_element_not_found', () => {
    KeepTrack.getInstance().containerRoot.innerHTML = '<div id="loader-text"></div>';
    SplashScreen.loadStr('test');
    expect(getEl('loader-text')?.textContent).toBe('test');
  });
});
